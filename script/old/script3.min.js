function buttonProcess(r){const e=r.innerText,t=/^[0-9]+$/.test(e),a=operators.includes(e),n=symbols.includes(e);if(t||"."===e)calculator.appendNumber(e),calculator.updateDisplay();else if(a)calculator.chooseOperation(e),calculator.updateDisplay();else if(n)calculator.transform(e),calculator.updateDisplay();else if("="===e)calculator.compute(),calculator.updateDisplay();else if("C"===e)calculator.clear(),calculator.updateDisplay();else if("CE"===e)calculator.clearEntries(),calculator.updateDisplay();else if("CLEAR"===e){const r=document.querySelectorAll(".resultPara"),e=document.querySelectorAll(".errorPara");e.forEach(r=>{r.remove(),console.log("Error Logs Cleared")}),r.forEach(r=>{r.remove(),console.log("Logs Cleared")})}}function logMessages(r){const e=r.innerText,{previousOperand:t,currentOperand:a,operator:n,result:s}=calculator,i=`\n    CurrentOperand: ${a}\n    Operator: ${n}\n    PreviousOperand: ${t}\n    Result: ${s}\n    `,o=`\n    <br>CurrentOperand: ${a}\n    <br>Operator: ${n}\n    <br>PreviousOperand: ${t}\n    <br>Result: ${s}\n    `,c=["+","-","×","÷"].includes(n),p=c?"AnyOperator":"="===e?"Equal":"C"===e?"Cleared":"ClearedEntries";console.log(p+i),displayLog(p+o)}function displayError(r){const e=errorMessages[r];if(e){const r=document.createElement("p");r.classList.add("errorPara"),resultLog.appendChild(r),r.innerHTML=e,resultLog.scrollTop=resultLog.scrollHeight,setTimeout(()=>{r.style.backgroundColor="rgba(255,70,70,0.7)"},500)}}function displayLog(r){const e=document.createElement("p");e.classList.add("resultPara"),resultLog.appendChild(e),e.innerHTML=r,resultLog.scrollTop=resultLog.scrollHeight}class Calculator{constructor(r,e){this.previousOperandTextElement=r,this.currentOperandTextElement=e,this.clearEntries()}clearEntries(){this.currentOperand=""}clear(){this.currentOperand="",this.previousOperand="",this.result="",this.operator=null}appendNumber(r){"."===r&&this.currentOperand.includes(".")||(this.currentOperand=this.currentOperand.toString()+r.toString())}chooseOperation(r){""!==this.currentOperand&&(""!==this.previousOperand&&this.compute(),this.operator=r,this.previousOperand=this.currentOperand,this.currentOperand="")}updateDisplay(){this.currentOperandTextElement.value=this.getDisplayNumber(this.currentOperand),null!=this.operator?this.previousOperandTextElement.value=`${this.getDisplayNumber(this.previousOperand)} ${this.operator}`:this.previousOperandTextElement.value=""}getDisplayNumber(r){const e=r.toString(),t=parseFloat(e.split(".")[0]),a=e.split(".")[1];let n;return n=Number.isNaN(t)?"":t.toLocaleString("en",{maximumFractionDigits:0}),null!=a?`${n}.${a}`:n}compute(){const r=parseFloat(this.previousOperand),e=parseFloat(this.currentOperand);if(!isNaN(r)&&!isNaN(e)){switch(this.operator){case"+":this.result=this.addition(r,e);break;case"-":this.result=this.subtract(r,e);break;case"×":this.result=this.multiply(r,e);break;case"÷":this.result=this.divide(r,e);break;default:return}this.currentOperand=this.result,this.operator=null,this.previousOperand=""}}addition(r,e){return r+e}subtract(r,e){return r-e}multiply(r,e){return r*e}divide(r,e){if(0===e)throw errorMessages("divideByZero"),new Error("0で除算はできません");return r/e}transform(r){if(""!==this.currentOperand)switch(r){case"%":this.currentOperand=this.percent();break;case"±":this.currentOperand=this.plusOrMinus();break;case"x^2":this.currentOperand=this.exponentiation(2);break;case"x^3":this.currentOperand=this.exponentiation(3);break;case"x^y":break;case"10^x":this.currentOperand=this.powerOf10();break;case"e":this.currentOperand=this.napier();break;case"e^x":this.currentOperand=this.napierExp();break;case"x!":this.currentOperand=this.factorial();break;case"1/x":this.currentOperand=this.reciprocal();break;case"2√x":this.currentOperand=this.squareRoot();break;case"3√x":this.currentOperand=this.cubedRoot();break;case"y√x":this.currentOperand=this.root();case"ln":this.currentOperand=this.log();break;case"log10":this.currentOperand=this.log10();break;case"logy":case"log2":this.currentOperand=this.log();break;case"sin(Rad)":this.currentOperand=this.sin("radian");break;case"sin(Deg)":this.currentOperand=this.sin("degree");break;case"sin-1":this.currentOperand=this.sin("arc");break;case"sinh":this.currentOperand=this.sin("sinh");break;case"sinh-1":this.currentOperand=this.sin("sinhArc");break;case"cos(Rad)":this.currentOperand=this.cos("radian");break;case"cos(Deg)":this.currentOperand=this.cos("degree");break;case"cos-1":this.currentOperand=this.cos("arc");break;case"cosh":this.currentOperand=this.cos("cosh");break;case"cosh-1":this.currentOperand=this.cos("coshArc");break;case"tan(Rad)":this.currentOperand=this.tan("radian");break;case"tan(Deg)":this.currentOperand=this.tan("degree");break;case"tan-1":this.currentOperand=this.tan("arc");break;case"tanh":this.currentOperand=this.tan("tanh");break;case"tanh-1":this.currentOperand=this.tanh("tanhArc");break;case"π":this.currentOperand=this.pi();break;case"Rand":this.currentOperand=this.rand();break;case"EE":this.currentOperand=this.enterExponent();break;default:throw errorMessages("symbol"),new Error("Symbolが定義されていません")}}percent(){return.01*parseFloat(this.currentOperand)}plusOrMinus(){return-1*parseFloat(this.currentOperand)}exponentiation(r){return Math.pow(parseFloat(this.currentOperand),r)}powerOf10(){return Math.pow(10,parseFloat(this.currentOperand))}napier(){return Math.E*parseFloat(this.currentOperand)}napierExp(){return Math.exp(parseFloat(this.currentOperand))}reciprocal(){return 1/parseFloat(this.currentOperand)}squareRoot(){return Math.sqrt(parseFloat(this.currentOperand))}cubedRoot(){return Math.cbrt(parseFloat(this.currentOperand))}log(){return Math.log(parseFloat(this.currentOperand))}log10(){return Math.log10(parseFloat(this.currentOperand))}factorial(){const r=parseFloat(this.currentOperand);if(Number.isNaN(r))throw displayError("input"),new Error("エラー: 無効な入力です");if(r<0||!Number.isInteger(r))throw displayError("nonNegativeInteger"),new Error("エラー： 入力は非負整数でなければなりません。");if(0===r||1===r)return 1;let e=1;for(let r=2;r<=this.currentOperand;r++)e*=r;return e}pi(){return Math.PI*parseFloat(this.currentOperand)}rand(){return Math.random()}degreesToRadians(r){return r*(Math.PI/180)}sin(r){if(Number.isNaN(this.currentOperand))throw displayError("input"),new Error("エラー: 無効な入力です");let e;switch(r){case"degree":if(this.currentOperand<-90||this.currentOperand>90)throw displayError("cosDeg"),new Error("エラー: 入力は -90 から 90 の範囲である必要があります");e=Math.sin(this.degreesToRadians(parseFloat(this.currentOperand)));break;case"radian":if(this.currentOperand<-Math.PI/2||this.currentOperand>Math.PI/2)throw displayError("sinRad"),new Error("エラー: 入力は -π/2 から π/2 の範囲である必要があります");e=Math.sin(parseFloat(this.currentOperand));break;case"arc":if(this.currentOperand<-1||this.currentOperand>1)throw displayError("sinArc"),new Error("エラー: 入力は -1 から 1 の範囲である必要があります");e=Math.asin(parseFloat(this.currentOperand));break;case"sinh":e=Math.sinh(parseFloat(this.currentOperand));break;case"sinhArc":if(this.currentOperand<1)throw displayError("sinhArc"),new Error("エラー: 入力は 1 以上である必要があります");e=Math.asinh(parseFloat(this.currentOperand));break;default:throw displayError("notSupportMode"),new Error("エラー: サポートされていないモードです。")}return e}cos(r){if(Number.isNaN(this.currentOperand))throw displayError("input"),new Error("エラー: 無効な入力です");let e;switch(r){case"degree":if(this.currentOperand<-90||this.currentOperand>90)throw displayError("cosDeg"),new Error("エラー: 入力は -90 から 90 の範囲である必要があります");e=Math.cos(this.degreesToRadians(parseFloat(this.currentOperand)));break;case"radian":if(this.currentOperand<-Math.PI/2||this.currentOperand>Math.PI/2)throw displayError("cosRad"),new Error("エラー: 入力は -π/2 から π/2 の範囲である必要があります");e=Math.cos(parseFloat(this.currentOperand));break;case"arc":if(this.currentOperand<-1||this.currentOperand>1)throw displayError("cosArc"),new Error("エラー: 入力は -1 から 1 の範囲である必要があります");e=Math.asin(parseFloat(this.currentOperand));break;case"cosh":e=Math.cosh(parseFloat(this.currentOperand));break;case"coshArc":if(this.currentOperand<1)throw displayError("coshArc"),new Error("エラー: 入力は 1 以上である必要があります");e=Math.acosh(parseFloat(this.currentOperand));break;default:throw displayError("notSupportMode"),new Error("エラー: サポートされていないモードです")}return e}tan(r){if(Number.isNaN(this.currentOperand))throw displayError("input"),new Error("エラー: 無効な入力です");let e;switch(r){case"degree":if(this.currentOperand%-90==45||this.currentOperand%90==-45)throw displayError("tanDeg"),new Error("エラー: 入力は 90 の倍数の範囲でなければなりません");e=Math.tan(this.degreesToRadians(parseFloat(this.currentOperand)));break;case"radian":if(Math.abs(this.currentOperand)%(Math.PI/2)==Math.PI/4)throw displayError("tanRad"),new Error("エラー: 入力は π/2 の倍数でなければなりません");e=Math.tan(parseFloat(this.currentOperand));break;case"arc":if(this.currentOperand<-1||this.currentOperand>1)throw displayError("tanArc"),new Error("エラー: 入力は -1 から 1 の範囲である必要があります");e=Math.atan(parseFloat(this.currentOperand));break;case"tanh":e=Math.tanh(parseFloat(this.currentOperand));break;case"tanhArc":if(this.currentOperand<=-1||this.currentOperand>=1)throw displayError("tanhArc"),new Error("エラー: 入力は -1 から 1 の範囲である必要があります");e=Math.atanh(parseFloat(this.currentOperand));break;default:throw displayError("notSupportMode"),new Error("エラー: サポートされていないモードです")}return e}enterExponent(){return parseFloat(this.currentOperand).toExponential()}}const previousOperandTextElement=document.getElementById("previousOperand"),currentOperandTextElement=document.getElementById("currentOperand"),inputFieldTextElement=document.getElementById("inputField"),buttons=document.querySelectorAll("button"),resultLog=document.querySelector(".result-log"),clearLog=document.getElementById("clearLog"),calculator=new Calculator(previousOperandTextElement,currentOperandTextElement);buttons.forEach(r=>{r.addEventListener("click",e=>{buttonProcess(r),logMessages(r),console.log(r.innerText)})});const operators=["+","-","×","*","/","÷"],symbols=["(",")","mc","m+","m-","mr","%","±","y^x","x^2","x^3","x^y","x^2","10^x","π","x!","1/x","2√x","3√x","y√x","sin(Deg)","cos(Deg)","tan(Deg)","sin(Rad)","cos(Rad)","tan(Rad)","sinh","cosh","tanh","sin-1","cos-1","tan-1","sinh-1","cosh-1","tanh-1","e","e^x","EE","Rand","ln","log10","logy","log2"],errorMessages={test:"テストメッセージです",divideByZero:"エラー: 0 で除算はできません",symbol:"エラー: Symbolが定義されていません",input:"エラー: 無効な入力です",nonNegativeInteger:"エラー: 入力は非負整数でなければなりません",sinDeg:"エラー: 入力は -90 から 90 の範囲である必要があります",sinRad:"エラー: 入力は -π/2 から π/2 の範囲である必要があります",sinArc:"エラー: 入力は -1 から 1 の範囲である必要があります",sinhArc:"エラー: 入力は 1 以上である必要があります",cosDeg:"エラー: 入力は -90 から 90 の範囲である必要があります",cosRad:"エラー: 入力は -π/2 から π/2 の範囲である必要があります",cosArc:"エラー: 入力は -1 から 1 の範囲である必要があります",coshArc:"エラー: 入力は 1 以上である必要があります",tanDeg:"エラー: 入力は 90 の倍数の範囲でなければなりません",tanRad:"エラー: 入力は π/2 の倍数でなければなりません",tanArc:"エラー: 入力は -1 から 1 の範囲である必要があります",tanhArc:"エラー: 入力は -1 から 1 の範囲である必要があります",notSupportMode:"エラー: サポートされていないモードです"};